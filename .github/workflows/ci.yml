name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.10'
  AWS_REGION: 'us-east-1'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type check with mypy
      run: |
        pip install mypy
        mypy src/ --ignore-missing-imports
    
    - name: Format check with black
      run: |
        pip install black
        black --check src/
    
    - name: Import sort check with isort
      run: |
        pip install isort
        isort --check-only src/
    
    - name: Security scan with detect-secrets
      run: |
        pip install detect-secrets
        detect-secrets scan --baseline .secrets.baseline
    
    - name: Run tests
      run: |
        PYTHONPATH=src pytest tests/ -v --cov=src --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel
    
    - name: Build wheel
      run: |
        python -m build
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Upload wheel to S3
      run: |
        aws s3 cp dist/*.whl s3://${{ secrets.CODE_BUCKET }}/dist/
        echo "Wheel uploaded to s3://${{ secrets.CODE_BUCKET }}/dist/"
    
    - name: Upload jobs to S3
      run: |
        aws s3 sync src/pyspark_interview_project/jobs/ s3://${{ secrets.CODE_BUCKET }}/jobs/
        aws s3 sync aws/scripts/ s3://${{ secrets.CODE_BUCKET }}/scripts/
        aws s3 sync conf/ s3://${{ secrets.CODE_BUCKET }}/config/
        aws s3 sync dq/ s3://${{ secrets.CODE_BUCKET }}/dq/
        echo "Jobs and scripts uploaded to S3"

  infra-plan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.5.0'
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Terraform Init
      run: |
        cd infra/terraform
        terraform init
    
    - name: Terraform Plan
      run: |
        cd infra/terraform
        terraform plan -no-color
      continue-on-error: true
    
    - name: Comment PR with Terraform Plan
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          const output = `#### Terraform Plan ðŸ“–
          \`\`\`
          ${{ steps.plan.outputs.stdout }}
          \`\`\`
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })