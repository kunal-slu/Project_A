name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        pytest -q tests/
    
    - name: Run code quality checks
      run: |
        black --check src/ tests/ scripts/
        isort --check-only src/ tests/ scripts/
        flake8 src/ tests/ scripts/
    
    - name: Run type checking
      run: |
        mypy src/ --ignore-missing-imports

  dry-run:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: 3.10
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create sample data
      run: |
        mkdir -p data/input_data
        echo "customer_id,first_name,last_name,email,age" > data/input_data/customers.csv
        echo "C001,John,Doe,john@example.com,25" >> data/input_data/customers.csv
        echo "C002,Jane,Smith,jane@example.com,30" >> data/input_data/customers.csv
        
        echo '{"order_id":"O001","customer_id":"C001","product_id":"P001","quantity":2,"total_amount":21.00}' > data/input_data/orders.json
        echo '{"order_id":"O002","customer_id":"C002","product_id":"P002","quantity":1,"total_amount":25.00}' >> data/input_data/orders.json
        
        echo "product_id,product_name,category,price" > data/input_data/products.csv
        echo "P001,Widget A,Electronics,10.50" >> data/input_data/products.csv
        echo "P002,Widget B,Electronics,25.00" >> data/input_data/products.csv
    
    - name: Run dry-run ETL pipeline
      run: |
        python scripts/run_local_etl.py --conf conf/application-local.yaml --limit 10