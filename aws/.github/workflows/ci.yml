name: AWS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.10"
  AWS_REGION: "us-east-1"

jobs:
  # Job 1: Code Quality and Testing
  quality-checks:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pre-commit

    - name: Run pre-commit hooks
      run: |
        pre-commit run --all-files

    - name: Run linting
      run: |
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics

    - name: Run type checking
      run: |
        mypy src/ --ignore-missing-imports

    - name: Run tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Job 2: Build and Package
  build:
    runs-on: ubuntu-latest
    needs: quality-checks
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel

    - name: Build wheel
      run: |
        python -m build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-wheel
        path: dist/*.whl

  # Job 3: AWS Deployment (only on main branch)
  deploy-aws:
    runs-on: ubuntu-latest
    needs: [quality-checks, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-wheel
        path: dist/

    - name: Deploy to S3
      run: |
        # Upload wheel to S3
        aws s3 cp dist/*.whl s3://${{ secrets.CODE_BUCKET }}/dist/
        
        # Upload jobs to S3
        aws s3 sync src/pyspark_interview_project/jobs/ s3://${{ secrets.CODE_BUCKET }}/jobs/
        
        # Upload scripts to S3
        aws s3 sync aws/scripts/ s3://${{ secrets.CODE_BUCKET }}/scripts/
        
        # Upload configs to S3
        aws s3 sync config/ s3://${{ secrets.CODE_BUCKET }}/config/
        
        # Upload DQ suites to S3
        aws s3 sync dq/ s3://${{ secrets.CODE_BUCKET }}/dq/

    - name: Update MWAA DAGs
      run: |
        # Upload DAGs to MWAA
        aws s3 sync aws/dags/ s3://${{ secrets.MWAA_DAGS_BUCKET }}/

    - name: Run smoke tests
      run: |
        # Run basic smoke tests to verify deployment
        python aws/scripts/run_ge_checks.py \
          --lake-root s3://${{ secrets.DATA_LAKE_BUCKET }} \
          --lake-bucket ${{ secrets.DATA_LAKE_BUCKET }} \
          --suite dq/suites/silver_orders.yml \
          --table orders \
          --layer silver

  # Job 4: Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run secret scanning
      run: |
        pip install detect-secrets
        detect-secrets scan --baseline .secrets.baseline

  # Job 5: Infrastructure Validation
  infra-validation:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Plan
      run: |
        cd aws/infra/terraform
        terraform init
        terraform plan -var="project=pyspark-de-project" -var="environment=dev"

  # Job 6: Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    needs: quality-checks
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run performance tests
      run: |
        pytest tests/test_performance_optimization.py -v --benchmark-only

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: .benchmarks/